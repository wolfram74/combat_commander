thinking architecture like
/
    models.py
    controller.py
    view_cli.py
    runner.py
    tests/
        test_cases.py
    data/
        agent_blah.json
        scenario_doof.json

contoller holds onto the agent objects, any state relevant stuff, methods for updating state
view_cli is the file that interprets command line inputs and displays relevant state data
runner orchestrates the two and/or runs test scenarios


user stories:
Xuser can have the program tell which agent is currently the focus
Xuser can be summarized conditions for agents
Xuser can see health for agents
Xuser can log attacks or actions by agents to other agents
Xpossible/common conditions include restrained, invisible, concentrating, grappled, prone, transformed, hasted
Xuser will be notified that an action has changed or triggered a response from an agent

test file architecture for test discovery
    https://stackoverflow.com/questions/1896918/running-unittest-with-typical-test-directory-structure


agents

todo:
    add doc strings to each function in view so "help" can provide syntax advice as well
    include agents identifier when conditions end
    remove_condition fix

todones:
    Xget scenario loading set up so it can be recursive, a scenario pointing to other scenarios and so on
    Xrework data structure of turn ordering to be strict list instead of dumb dict
    Xrework input parser to be dict pointing to functions
        use key vals to auto generate help menu
    Xset up inverse functions

Peter, I am a volunteer at a job hunting networking group. Connect with  me off-line.  mcposton.jtsg@outlook.com.